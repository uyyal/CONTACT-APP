step:1 ==> create folder
step:2 ==> create package.json file (npm init -y)
step:3 ==> install .env (npm install dotenv)
step:4 ==>create .env file
step:5 ==> install mongoose(npm install mongoose)
step:6 ==> install nodemon(npm install nodemon)
step:7 ==> install handlebars(npm install express-handlebars)


const url='mongodb://0.0.0.0:27017';


What is Middleware in Express.js?
In Express.js, middleware refers to functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. 
Middleware functions can perform tasks like modifying request/response objects, running logic, and controlling the flow to the next middleware or route handler.

Key Characteristics of Middleware
Executed in Sequence: Middleware functions are executed in the order they are defined in your application.
Access to req and res: Middleware can read, modify, or process the incoming request and outgoing response.
Next Function (next):
If the middleware doesn't end the request-response cycle (e.g., by sending a response), it must call next() to pass control to the next middleware or route.
Reusable: Middleware can be used across routes or applications.

Common Use Cases for Middleware
Logging: Record information about incoming requests (e.g., URL, headers).
Authentication/Authorization: Validate user credentials or permissions.
Parsing Request Body: Convert incoming payloads (JSON, forms) into usable objects.
Serving Static Files: Serve assets like CSS, JavaScript, and images.
Error Handling: Catch and handle application errors gracefully.

 What is /api?
Namespace for API Routes:
The /api prefix is used to distinguish routes that are designed for programmatic interaction, as opposed to serving static files or rendering web pages.

Example:
/ → Serves an HTML home page.
/api/users → Serves user data in JSON format.
RESTful APIs:
Typically follows RESTful principles (Representational State Transfer), where routes correspond to resources (e.g., /api/users for user data) and HTTP methods define actions (GET, POST, PUT, DELETE).
2. Why Use /api?
Separation of Concerns:

Keeps API routes distinct from traditional frontend routes.
Makes it clear that the route is meant for data exchange (JSON) rather than rendering web pages.
Organized Structure:

Groups all API-related routes under a single namespace, improving clarity and maintainability.
Scalability:

Simplifies route management as the application grows.
Third-Party Integration:

Exposes a clear set of endpoints for external systems to interact with your app.

How /api is Used in Code
The /api prefix is usually defined using a routing middleware like app.use() in Express.js. Here’s how it is commonly implemented: